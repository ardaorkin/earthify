{"version":3,"sources":["components/Styles.js","components/Playlists.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","minHeight","width","backgroundColor","color","position","left","opacity","Playlists","props","useState","playlists","setPlaylists","React","useEffect","setInterval","JSON","parse","localStorage","getItem","handleChangePlaylist","playlist","fetch","method","headers","body","stringify","context_uri","uri","then","res","json","result","console","log","map","onClick","name","Menu","classes","className","App","redirect_uri","access_token","accessToken","setToken","window","auth","refresh","setRefresh","client_id","location","origin","pathname","mapboxgl","require","search","match","split","setItem","refresh_token","catch","err","Map","container","style","zoom","on","e","requestToSpotify","lngLat","lng","toString","lat","features","feature","place_type","encodeURIComponent","text","error","status","refreshToken","items","item","owner","display_name","push","length","Object","keys","devices","alert","deviceArr","device","is_active","id","response","device_ids","isPublic","confirm","public","description","reload","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bd083a63.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles, createMuiTheme } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        minHeight: \"100vh\",\n        width: \"15%\",\n        backgroundColor: \"black\",\n        color: \"white\",\n        position: \"absolute\",\n        left: \"0\",\n        opacity: \"0.9\"\n    }\n}))\n\nexport { useStyles }","import React, { useState } from 'react'\nimport { useStyles } from './Styles'\n\nexport default function Playlists(props) {\n    const classes = useStyles();\n    const [playlists, setPlaylists] = useState()\n\n    React.useEffect(() => {\n        setInterval(() => {\n            setPlaylists(JSON.parse(localStorage.getItem('playlists')))\n        })\n    })\n\n\n\n    var handleChangePlaylist = (playlist) => {\n        \n        fetch(`https://api.spotify.com/v1/me/player/play`, {\n            method: \"PUT\",\n            headers: {\n                'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n              },\n              body: JSON.stringify({ context_uri: playlist.uri })\n        })\n        .then(res => res.json())\n        .then(result => console.log(result))\n    }\n\n    return (\n        <>\n            {playlists ?\n                playlists.map(playlist => {\n                    return (\n                        <ul>\n                            <li onClick={handleChangePlaylist(playlist)}>{playlist.name}</li>\n                        </ul>\n                    )\n                })\n                : null}\n        </>\n    )\n\n}","import React from 'react'\nimport {useStyles} from './Styles'\nimport Playlists from './Playlists'\n\n\nexport default function Menu(props) {\n\n    const classes = useStyles()\n\n    return (\n        <div className={classes.paper}>\n            <Playlists {...props} />\n        </div>\n    )\n}","import React from 'react';\nimport Menu from './components/Menu'\nimport './App.css';\n\nfunction App(props) {\n  const access_token = localStorage.getItem('access_token') || \"\"\n  const [accessToken, setToken] = React.useState(access_token)\n  const [auth, setAuth] = React.useState(window.localStorage.getItem('auth'))\n  const [refresh, setRefresh] = React.useState(localStorage.getItem('refresh_token'))\n\n\n  var client_id = \"9e71a4da3ee24d31ab4fd842607cce9e\";\n  var client_secret = \"907e432cd3d74554b29582eb58756277\";\n  var ciCsB64 = \"OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\"\n  var redirect_uri\n  if (window.location.origin !== \"http://localhost:3000\") {\n    redirect_uri = window.location.origin + window.location.pathname\n  } else {\n    redirect_uri = window.location.origin + \"/callback\"\n  }\n  var scopes = 'user-read-private user-read-email user-modify-playback-state user-read-playback-state playlist-modify-public playlist-modify-private';\n\n  var mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\n  mapboxgl.accessToken = 'pk.eyJ1IjoiYXJkYW9ya2luIiwiYSI6ImNrOW9teW8wMzAyNnczbHJ0emVvNHE5dXcifQ.J_P9VwfH6UeYpgG5gw-JJQ';\n\n  if (window.location.search.match(/\\?code/g) !== null) {\n\n    fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        //\"Authorization\": \"Basic \" + ciCsB64,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Accept\": \"application/json\"\n      },\n      body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}&client_id=${client_id}&client_secret=${client_secret}`\n    })\n      .then(res => res.json())\n      .then(result => {\n        localStorage.setItem('create_access_token_result', JSON.stringify(result))\n        localStorage.setItem('access_token', result.access_token)\n        localStorage.setItem('refresh_token', result.refresh_token)\n      })\n      .then(() => {\n        setToken(localStorage.getItem('access_token'))\n        setRefresh(localStorage.getItem('refresh_token'))\n      })\n      .then(() => window.location = window.location.origin + \"/earthify\")\n      .then(() => window.localStorage.setItem('auth', true))\n      .catch(err => console.log(\"acees_token_respone: \", err))\n  }\n\n  \n  React.useEffect(() => {\n\n\n    var map = new mapboxgl.Map({\n      container: 'root',\n      style: \"mapbox://styles/mapbox/light-v10\",\n      zoom: 3\n    });\n\n\n    map.on('click', (e) => {\n\n      if (!window.location.search.match(/\\?code/g) && !auth) {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${encodeURIComponent(scopes)}&show_dialog=true`\n      }\n      else {\n        console.log(\"acces_token: \", accessToken)\n\n\n        function requestToSpotify() {\n\n          fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${e.lngLat.lng.toString()},${e.lngLat.lat.toString()}.json?&access_token=${mapboxgl.accessToken}`, {\n            method: \"GET\",\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })\n            .then(res =>\n              res.json()\n            )\n            .then(result => {\n              result.features.map(feature => {\n\n                if (feature.place_type[0] === \"country\") {\n                  console.log(\"map_results: \", feature)\n\n                  fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(`${feature.text} top 50`)}&type=playlist`, {\n                    method: \"GET\",\n                    headers: {\n                      'Authorization': `Bearer ${accessToken}`,\n                    }\n                  })\n                    .then(res => res.json())\n                    .then(result => {\n                      if (result.error && result.error.status === 401) {\n                        refreshToken()\n                      }\n                      console.log(\"search_results: \", result)\n\n                      \n                      var playlists = []\n                      var playlist = []\n                      result.playlists.items.map(item => {\n                        if (item.owner.display_name === \"Top 50 Playlists\") {\n                          playlists.push(item)\n                        } else if (item.owner.display_name === \"spotifycharts\") {\n                          playlists.push(item)\n                        } else if (item.name.match(/top\\ 50/gi)) {\n                          playlists.push(item)\n                        }\n                      })\n                      \n                      if (playlists.length > 1) {\n                        playlist = playlists[0]\n                      } else {\n                        playlist = playlists\n                      }\n                      \n                      if (Object.keys(playlist).length > 0) {\n                        \n                        localStorage.setItem('playlists', JSON.stringify(playlists))\n                        \n                        console.log(\"top_fifth_playlists: \", playlist)\n                        \n                        fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n                          method: \"GET\",\n                          headers: {\n                            'Authorization': 'Bearer ' + accessToken\n                          }\n                        })\n                          .then(res => res.json())\n                          .then(result => {\n                            if (result.error && result.error.status === 401) {\n                              refreshToken()\n                            }\n                            console.log(\"all_devices_result: \", result)\n                            if (result.devices.length === 0) {\n                              alert('Please run Spotify App in your device.')\n                            }\n                            var deviceArr = []\n                            result.devices.map(device => {\n                              if (device.is_active === true) {\n                                deviceArr.push(device.id)\n                              }\n                              return deviceArr\n                            })\n                            console.log(\"active_devices_array: \", deviceArr)\n                            if (deviceArr.length > 0) {\n                              console.log(\"active device found!\")\n                              fetch(\"https://api.spotify.com/v1/me/player/play?\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': `Bearer ${accessToken}`,\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\",\n                                },\n                                body: JSON.stringify({ context_uri: playlist.uri })\n                              })\n                                .then((response) => response.json())\n                                .then(result => {\n                                  if (result.error && result.error.status === 401) {\n                                    refreshToken()\n                                  }\n                                  console.log(\"player_result: \", result)\n                                })\n                                .catch(err => console.log(\"player_err: \", err))\n                            } else if (deviceArr.length === 0) {\n                              console.log(\"there is no active device. first found device is activating...\")\n                              fetch(\"https://api.spotify.com/v1/me/player\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': 'Bearer ' + accessToken,\n                                  'Content-Type': 'application/json',\n                                  'Accept': 'application/json'\n                                },\n                                body: JSON.stringify({ device_ids: [deviceArr[0]], \"play\": true })\n                              })\n                                .then(res => res.json())\n                                .then(result => {\n                                  if (result.error && result.error.status === 401) {\n                                    refreshToken()\n                                  } else if (result.error && result.error.status === 404) {\n                                    alert('Please run Spotify App in your device.')\n                                  }\n                                  console.log(\"activate_device_result: \", result)\n                                })\n                            }\n                          })\n                          .catch(err => console.log(\"device_err: \", err))\n                      } else if (Object.keys(playlist).length === 0) {\n                        console.log(\"there is no top 50 playlist for this country\")\n                        if (window.confirm(`There is any Top 50 playlist for ${feature.text}\\nDo you wanna create one?`)) {\n                          let isPublic\n                          if (window.confirm(\"Do you wanna make it public?\")) {\n                            isPublic = true\n                          } else {\n                            isPublic = false\n                          }\n                          fetch(\"https://api.spotify.com/v1/me\", {\n                            method: \"GET\",\n                            headers: {\n                              \"Authorization\": \"Bearer \" + accessToken\n                            }\n                          })\n                            .then(res => res.json())\n                            .then(result => {\n                              console.log(\"current_user_info: \", result)\n                              fetch(`https://api.spotify.com/v1/users/${result.id}/playlists`, {\n                                method: \"POST\",\n                                headers: {\n                                  'Authorization': 'Bearer ' + accessToken,\n                                  'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify({ name: `${feature.text} Top 50`, public: isPublic, description: \"Created via Earthify\" })\n                              })\n                                .then(res => res.json())\n                                .then(result => {\n                                  console.log(\"create_playlist_result: \", result)\n                                  alert(`Congratulaitons! You've just create a playlist name ${feature.text} Top 50\\nYou playlists' Spotify URI is ${result.uri}\\nLet's add some track.\\nMay the followers be with you! ;)`)\n                                })\n                            })\n                        }\n                      }\n                      return playlist\n                    })\n                    .catch(err => console.log(\"search_err: \", err))\n                }\n                return feature\n              })\n            })\n            .catch((err) => {\n              console.log(\"map_err: \", err)\n            })\n\n        }\n        function refreshToken() {\n          console.log(\"access token is refreshing...\")\n\n          fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: {\n              \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6ZjJhZjc4MjVhOTA1NGNiNWE5MmMwZDZlMWEwNDAwNTY=\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n              \"Accept\": \"application/json\"\n            },\n            body: `grant_type=refresh_token&refresh_token=${refresh}`\n          })\n            .then(res => res.json())\n            .then(result => {\n              console.log(\"updating access token...\")\n              localStorage.setItem('access_token', result.access_token)\n            })\n            .then(() => console.log(\"acess token were refresh\\nnew access token: \", localStorage.getItem('access_token')))\n            .then(() => requestToSpotify())\n            .then(() => window.location.reload())\n        }\n\n        requestToSpotify()\n      }\n    })\n\n  }, [])\n\n\n  return (\n    <>\n      <Menu>\n      </Menu>\n        <div id=\"map\" className=\"App\">\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}