{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","localStorage","getItem","accessToken","isAuth","window","auth","redirect_uri","location","origin","pathname","mapboxgl","require","search","match","a","setItem","split","fetch","method","headers","body","then","res","json","result","access_token","refresh_token","catch","err","console","log","afterAuthorize","useEffect","Map","container","style","zoom","on","e","lngLat","lng","toString","lat","features","map","feature","place_type","encodeURIComponent","text","playlists","items","item","owner","display_name","uri","devices","JSON","stringify","context_uri","response","data","id","className","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.42cbfb2f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  const [accessToken, setToken] = React.useState(localStorage.getItem('access_token'))\n  const isAuth = window.localStorage.getItem('auth') || false\n  const [auth, setAuth] = React.useState(isAuth)\n  const [code, setCode] = React.useState(localStorage.getItem(\"code\"))\n  var baseURI = \"https://api.spotify.com/\"\n  var client_id = '9e71a4da3ee24d31ab4fd842607cce9e';\n  var redirect_uri = window.location.origin + window.location.pathname\n  var scopes = 'user-modify-playback-state user-read-playback-state';\n\n\n  var mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\n  mapboxgl.accessToken = 'pk.eyJ1IjoiYXJkYW9ya2luIiwiYSI6ImNrOW9teW8wMzAyNnczbHJ0emVvNHE5dXcifQ.J_P9VwfH6UeYpgG5gw-JJQ';\n\n  if (window.location.search.match(/\\?code/g) !== null) {\n    async function afterAuthorize() {\n      await window.localStorage.setItem('auth', true)\n      await localStorage.setItem(\"code\", window.location.search.split(\"=\")[1])\n      await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6ZjJhZjc4MjVhOTA1NGNiNWE5MmMwZDZlMWEwNDAwNTY=\",\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          \"Accept\": \"application/json\"\n        },\n        body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}`\n      })\n        .then(res => res.json())\n        .then(result => localStorage.setItem('access_token', result.access_token))\n        .then(result => localStorage.setItem('refresh_token', result.refresh_token))\n        .then(() => window.location = window.location.origin + \"/earthify\")\n        .catch(err => console.log(\"acees_token_respone: \", err))\n    }\n    afterAuthorize()\n  }\n\n\n  React.useEffect(() => {\n    var map = new mapboxgl.Map({\n      container: 'root',\n      style: 'mapbox://styles/mapbox/dark-v10',\n      zoom: 3\n    });\n\n\n\n    map.on('click', (e) => {\n      if (!window.location.search.match(/\\?code/g) && !auth) {\n        window.location = \"https://accounts.spotify.com/authorize?client_id=\" + client_id + \"&response_type=code\" + \"&redirect_uri=\" + encodeURIComponent(redirect_uri) + \"&scope=\" + encodeURIComponent(scopes) + \"&show_dialog=true\"\n      }\n      else {\n        console.log(\"acces_token: \", accessToken)\n\n        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${e.lngLat.lng.toString()},${e.lngLat.lat.toString()}.json?&access_token=${mapboxgl.accessToken}`, {\n          method: \"GET\",\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n          .then(res =>\n            res.json()\n          )\n          .then(result => {\n            result.features.map(feature => {\n              if (feature.place_type[0] === \"country\") {\n                  fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(`${feature.text} top 50`)}&type=playlist`, {\n                    method: \"GET\",\n                    headers: {\n                      'Authorization': `Bearer ${accessToken}`,\n                    }\n                  })\n                    .then(res => res.json())\n                    .then(result => {\n                      console.log(\"search_results: \", result)\n                      result.playlists.items.map(item => {\n                        if(item.owner.display_name === \"Top 50 Playlists\") {\n                          console.log(\"top_fifth_playlists: \", item.uri)\n                          fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n                    method: \"GET\",\n                    headers: {\n                      'Authorization': 'Bearer ' + accessToken\n                    }\n                  })\n                    .then(res => res.json())\n                    .then(result => {\n                      console.log(result.devices)\n                      fetch(\"https://api.spotify.com/v1/me/player/play?\", {\n                        method: \"PUT\",\n                        headers: {\n                          'Authorization': `Bearer ${accessToken}`,\n                          \"Content-Type\": \"application/json\",\n                          \"Accept\": \"application/json\",\n                        },\n                        body: JSON.stringify({ context_uri: item.uri })\n                      })\n                        .then((response) => response.json())\n                        .then(data => console.log(\"player_result: \", data))\n                        .catch(err => console.log(\"player_err: \", err))\n                    }\n                    )\n                    .catch(err => console.log(\"device_err: \", err))\n                        }\n                      })\n                    })\n                    .catch(err => console.log(\"search_err: \", err))\n                \n              }\n            })\n          })\n          .catch((err) => {\n            console.log(\"map_err: \", err)\n          })\n      }\n    })\n\n  }, [])\n  return (\n    <>\n      <div id=\"map\" className=\"App\">\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}