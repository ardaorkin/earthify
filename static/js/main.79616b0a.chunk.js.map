{"version":3,"sources":["earthmusic.png","magnifier.png","App.js","Intro.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","mapStyle","localStorage","getItem","access_token","React","useState","accessToken","setToken","window","auth","refresh","setRefresh","playlistStore","setPlaylist","earth","setEarth","dark","setDark","client_id","redirect_uri","location","origin","pathname","mapboxgl","require","search","match","fetch","method","headers","body","split","then","res","json","result","setItem","JSON","stringify","refresh_token","catch","err","console","log","useEffect","map","Map","container","style","zoom","on","e","requestToSpotify","lngLat","lng","toString","lat","features","feature","place_type","encodeURIComponent","text","error","status","refreshToken","playlists","playlist","items","item","owner","display_name","name","push","length","Object","keys","devices","alert","deviceArr","device","is_active","id","context_uri","uri","response","device_ids","isPublic","confirm","public","description","reload","handleChangePlaylist","className","onClick","currentMapStyle","getStyle","setStyle","handleStyleMap","undefined","key","parse","Intro","src","earthmusic","alt","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.79616b0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earthmusic.21749bcf.png\";","module.exports = __webpack_public_path__ + \"static/media/magnifier.add06f1c.png\";","/*\n    This file is part of Earthify.\n\n    Earthify is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    Earthify is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with Earthify.  If not, see <https://www.gnu.org/licenses/>.\n*/\nimport React from 'react';\nimport './App.css';\nimport magnifier from './magnifier.png'\n\nfunction App(props) {\n  const mapStyle = localStorage.getItem(\"map_style\") || \"light\"\n  const access_token = localStorage.getItem('access_token') || \"\"\n  const [accessToken, setToken] = React.useState(access_token)\n  const [auth, setAuth] = React.useState(window.localStorage.getItem('auth'))\n  const [refresh, setRefresh] = React.useState(localStorage.getItem('refresh_token'))\n  const [playlistStore, setPlaylist] = React.useState()\n  const [earth, setEarth] = React.useState()\n  const [dark, setDark] = React.useState(mapStyle)\n  const [searchCountry, setSearch] = React.useState()\n\n  var client_id = \"9e71a4da3ee24d31ab4fd842607cce9e\";\n  var client_secret = \"907e432cd3d74554b29582eb58756277\";\n  var ciCsB64 = \"OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\"\n  // var redirect_uri = \"http://localhost:3000/callback\"\n  var redirect_uri = window.location.origin + window.location.pathname\n  var scopes = 'user-read-private user-read-email user-modify-playback-state user-read-playback-state playlist-modify-public playlist-modify-private';\n\n  var mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\n  mapboxgl.accessToken = 'pk.eyJ1IjoiYXJkYW9ya2luIiwiYSI6ImNrOW9teW8wMzAyNnczbHJ0emVvNHE5dXcifQ.J_P9VwfH6UeYpgG5gw-JJQ';\n\n  if (window.location.search.match(/\\?code/g) !== null) {\n\n    fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        //\"Authorization\": \"Basic \" + ciCsB64,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Accept\": \"application/json\"\n      },\n      body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}&client_id=${client_id}&client_secret=${client_secret}`\n    })\n      .then(res => res.json())\n      .then(result => {\n        localStorage.setItem('create_access_token_result', JSON.stringify(result))\n        localStorage.setItem('access_token', result.access_token)\n        localStorage.setItem('refresh_token', result.refresh_token)\n      })\n      .then(() => {\n        setToken(localStorage.getItem('access_token'))\n        setRefresh(localStorage.getItem('refresh_token'))\n      })\n      .then(() => window.location = window.location.origin + \"/earthify\")\n      .then(() => window.localStorage.setItem('auth', true))\n      .catch(err => console.log(\"acees_token_respone: \", err))\n  }\n\n\n  React.useEffect(() => {\n\n    var map = new mapboxgl.Map({\n      container: 'root',\n      style: `mapbox://styles/mapbox/${dark}-v10`,\n      zoom: 3\n    });\n\n    setEarth(map)\n\n    map.on('click', (e) => {\n\n      if (!window.location.search.match(/\\?code/g) && !auth) {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${encodeURIComponent(scopes)}&show_dialog=true`\n      }\n      else {\n        console.log(\"acces_token: \", accessToken)\n\n\n        function requestToSpotify() {\n\n          fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${e.lngLat.lng.toString()},${e.lngLat.lat.toString()}.json?&access_token=${mapboxgl.accessToken}`, {\n            method: \"GET\",\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })\n            .then(res =>\n              res.json()\n            )\n            .then(result => {\n              result.features.map(feature => {\n\n                if (feature.place_type[0] === \"country\") {\n                  console.log(\"map_results: \", feature)\n\n                  fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(`${feature.text} top 50`)}&type=playlist`, {\n\n                    method: \"GET\",\n                    headers: {\n                      'Authorization': `Bearer ${accessToken}`,\n                    }\n                  })\n                    .then(res => res.json())\n                    .then(result => {\n                      if (result.error && result.error.status === 401) {\n                        refreshToken()\n                      }\n                      console.log(\"search_results: \", result)\n\n\n                      var playlists = []\n                      var playlist = []\n                      result.playlists.items.map(item => {\n                        if (item.owner.display_name === \"Top 50 Playlists\") {\n                          playlists.push(item)\n                        } else if (item.owner.display_name === \"spotifycharts\") {\n                          playlists.push(item)\n                        } else if (item.name.match(/top\\ 50/gi)) {\n                          playlists.push(item)\n                        }\n                      })\n\n                      if (playlists.length > 1) {\n                        playlist = playlists[0]\n                      } else {\n                        playlist = playlists\n                      }\n\n                      if (Object.keys(playlist).length > 0) {\n\n                        setPlaylist(playlists)\n\n                        localStorage.setItem(\"countrys_top_fifths\", JSON.stringify(playlists))\n\n                        console.log(\"top_fifth_playlists: \", playlist)\n\n                        fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n                          method: \"GET\",\n                          headers: {\n                            'Authorization': 'Bearer ' + accessToken\n                          }\n                        })\n                          .then(res => res.json())\n                          .then(result => {\n                            if (result.error && result.error.status === 401) {\n                              refreshToken()\n                            }\n                            console.log(\"all_devices_result: \", result)\n                            if (result.devices.length === 0) {\n                              alert('Please run Spotify App in your device.')\n                            }\n                            var deviceArr = []\n                            result.devices.map(device => {\n                              if (device.is_active === true) {\n                                deviceArr.push(device.id)\n                              }\n                              return deviceArr\n                            })\n                            console.log(\"active_devices_array: \", deviceArr)\n                            if (deviceArr.length > 0) {\n                              console.log(\"active device found!\")\n                              fetch(\"https://api.spotify.com/v1/me/player/play?\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': `Bearer ${accessToken}`,\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\",\n                                },\n                                body: JSON.stringify({ context_uri: playlist.uri })\n                              })\n                                .then((response) => response.json())\n                                .then(result => {\n                                  if (result.error && result.error.status === 401) {\n                                    refreshToken()\n                                  }\n                                  console.log(\"player_result: \", result)\n                                })\n                                .catch(err => console.log(\"player_err: \", err))\n                            } else if (deviceArr.length === 0) {\n                              console.log(\"there is no active device. first found device is activating...\")\n                              fetch(\"https://api.spotify.com/v1/me/player\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': 'Bearer ' + accessToken,\n                                  'Content-Type': 'application/json',\n                                  'Accept': 'application/json'\n                                },\n                                body: JSON.stringify({ device_ids: [deviceArr[0]], \"play\": true })\n                              })\n                                .then(res => res.json())\n                                .then(result => {\n                                  if (result.error && result.error.status === 401) {\n                                    refreshToken()\n                                  } else if (result.error && result.error.status === 404) {\n                                    alert('Please run Spotify App in your device.')\n                                  }\n                                  console.log(\"activate_device_result: \", result)\n                                })\n                            }\n                          })\n                          .catch(err => console.log(\"device_err: \", err))\n                      } else if (Object.keys(playlist).length === 0) {\n                        console.log(\"there is no top 50 playlist for this country\")\n                        if (window.confirm(`There isn't any Top 50 playlist for ${feature.text}.\\nDo you wanna create one?`)) {\n                          let isPublic\n                          if (window.confirm(\"Do you wanna make it public?\")) {\n                            isPublic = true\n                          } else {\n                            isPublic = false\n                          }\n                          fetch(\"https://api.spotify.com/v1/me\", {\n                            method: \"GET\",\n                            headers: {\n                              \"Authorization\": \"Bearer \" + accessToken\n                            }\n                          })\n                            .then(res => res.json())\n                            .then(result => {\n                              console.log(\"current_user_info: \", result)\n                              fetch(`https://api.spotify.com/v1/users/${result.id}/playlists`, {\n                                method: \"POST\",\n                                headers: {\n                                  'Authorization': 'Bearer ' + accessToken,\n                                  'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify({ name: `${feature.text} Top 50`, public: isPublic, description: \"Created via Earthify\" })\n                              })\n                                .then(res => res.json())\n                                .then(result => {\n                                  console.log(\"create_playlist_result: \", result)\n                                  alert(`Congratulaitons! You've just created a playlist named ${feature.text} Top 50!\\nThe Spotify URI of your playtlist is ${result.uri}\\nLet's add some tracks.\\nMay the followers be with you! ;)`)\n                                })\n                            })\n                        }\n                      }\n                      return playlist\n                    })\n                    .catch(err => console.log(\"search_err: \", err))\n                }\n                return feature\n              })\n            })\n            .catch((err) => {\n              console.log(\"map_err: \", err)\n            })\n        }\n        function refreshToken() {\n          console.log(\"access token is refreshing...\")\n\n          fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: {\n              \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n              \"Accept\": \"application/json\"\n            },\n            body: `grant_type=refresh_token&refresh_token=${refresh}`\n          })\n            .then(res => res.json())\n            .then(result => {\n              console.log(\"updating access token...\")\n              localStorage.setItem('access_token', result.access_token)\n            })\n            .then(() => console.log(\"acess token were refresh\\nnew access token: \", localStorage.getItem('access_token')))\n            .then(() => requestToSpotify())\n            .then(() => window.location.reload())\n        }\n\n        requestToSpotify()\n      }\n    })\n\n\n  }, [])\n\n  var handleStyleMap = () => {\n    var currentMapStyle = earth.getStyle()\n    if (currentMapStyle.name === \"Mapbox Light\") {\n      earth.setStyle(\"mapbox://styles/mapbox/dark-v10\")\n      localStorage.setItem(\"map_style\", \"dark\")\n      setDark(localStorage.getItem(\"map_style\"))\n    } else if (currentMapStyle.name === \"Mapbox Dark\") {\n      earth.setStyle(\"mapbox://styles/mapbox/light-v10\")\n      localStorage.setItem(\"map_style\", \"light\")\n      setDark(localStorage.getItem(\"map_style\"))\n    }\n  }\n\n  var handleChangePlaylist = (playlist) => {\n\n    fetch(\"https://api.spotify.com/v1/me/player/play\", {\n      method: \"PUT\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\n      },\n      body: JSON.stringify({ context_uri: playlist.uri })\n    })\n      .then(res => res)\n      .then(result => console.log(result))\n  }\n\n\n  var handleSearchText = (e) => {\n    e.preventDefault()\n    setSearch(e.target.value)\n  }\n\n  var handleSearchCountry = (e) => {\n    fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(e)}.json?&access_token=${mapboxgl.accessToken}`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(res => res.json())\n    .then(result => {\n      console.log(\"searched_country_result: \", result)\n      \n    })\n  }\n\n  return (\n    <>\n      <div className=\"settings\">\n        {/* <div style={{height: \"25px\", float: \"left\", marginLeft: \"15px\", marginTop: \"10px\", marginBottom: \"5px\"}}>\n          <input name=\"search-country\" type=\"text\" style={{height: \"25px\", float: \"left\"}} value={searchCountry || \"\"} onChange={handleSearchText}></input>\n          <div style={{float: \"left\", width: \"50px\", backgroundColor: \"rgb(56, 56, 56)\", textAlign: \"center\"}}><input type=\"image\" src={magnifier} alt=\"search\" className=\"icon\" onClick={() => handleSearchCountry(searchCountry)}></input></div>\n        </div> */}\n        <div>\n          <button onClick={() => handleStyleMap()}>{dark === \"light\" ? \"Dark Mode\" : \"Light Mode\"}</button>\n        </div>\n        <div>\n          <ul>\n            {playlistStore !== undefined ?\n              playlistStore.map(playlist => {\n                return <li onClick={() => handleChangePlaylist(playlist)} key={playlist.id}>{playlist.name}</li>\n              }) : localStorage.getItem(\"countrys_top_fifths\") ? JSON.parse(localStorage.getItem(\"countrys_top_fifths\")).map(playlist => {\n                return <li onClick={() => handleChangePlaylist(playlist)} key={playlist.id}>{playlist.name}</li>\n              }) : null\n            }\n          </ul>\n        </div>\n      </div>\n      <div id=\"map\" className=\"App\">\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React, { useEffect } from 'react'\nimport earthmusic from './earthmusic.png'\n\nexport default function Intro() {\n\n    var client_id = \"9e71a4da3ee24d31ab4fd842607cce9e\";\n    var client_secret = \"907e432cd3d74554b29582eb58756277\";\n    var ciCsB64 = \"OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\"\n    // var redirect_uri = \"http://localhost:3000/callback\"\n    var redirect_uri = window.location.origin + window.location.pathname\n    var scopes = 'user-read-private user-read-email user-modify-playback-state user-read-playback-state playlist-modify-public playlist-modify-private';\n\n    var handleLogin = () => {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${encodeURIComponent(scopes)}&show_dialog=true`\n    }\n\n    if (window.location.search.match(/\\?code/g) !== null) {\n\n        fetch(\"https://accounts.spotify.com/api/token\", {\n          method: \"POST\",\n          headers: {\n            //\"Authorization\": \"Basic \" + ciCsB64,\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Accept\": \"application/json\"\n          },\n          body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}&client_id=${client_id}&client_secret=${client_secret}`\n        })\n          .then(res => res.json())\n          .then(result => {\n            localStorage.setItem('create_access_token_result', JSON.stringify(result))\n            localStorage.setItem('access_token', result.access_token)\n            localStorage.setItem('refresh_token', result.refresh_token)\n          })\n          .then(() => window.location = window.location.origin + \"/earthify\")\n          .then(() => window.localStorage.setItem('auth', true))\n          .catch(err => console.log(\"acees_token_respone: \", err))\n      }\n\n    return(\n        <div className=\"intro\">\n            <div>\n            <img src={earthmusic} alt=\"earthify-icon\" className=\"intro-icon\"></img>\n            </div>\n            <div>\n            <button className=\"intro-button\" onClick={handleLogin}>Login</button>\n            </div>\n        </div>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Intro from './Intro'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    {localStorage.getItem(\"access_token\") == null ? <Intro /> : <App />}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}