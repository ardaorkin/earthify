{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","access_token","localStorage","getItem","React","useState","accessToken","setToken","window","auth","refresh","setRefresh","playlistStore","setPlaylist","client_id","mapboxgl","require","location","search","match","fetch","method","headers","body","split","then","res","json","result","setItem","JSON","stringify","refresh_token","origin","catch","err","console","log","useEffect","Map","container","style","zoom","on","e","requestToSpotify","lngLat","lng","toString","lat","features","map","feature","place_type","encodeURIComponent","text","error","status","refreshToken","playlists","playlist","items","item","owner","display_name","name","push","length","Object","keys","devices","alert","deviceArr","device","is_active","id","context_uri","uri","response","device_ids","isPublic","confirm","public","description","reload","className","undefined","onClick","handleChangePlaylist","key","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f98819eb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App(props) {\n  const access_token = localStorage.getItem('access_token') || \"\"\n  const [accessToken, setToken] = React.useState(access_token)\n  const [auth, setAuth] = React.useState(window.localStorage.getItem('auth'))\n  const [refresh, setRefresh] = React.useState(localStorage.getItem('refresh_token'))\n  const [playlistStore, setPlaylist] = React.useState()\n\n\n  var client_id = \"9e71a4da3ee24d31ab4fd842607cce9e\";\n  var client_secret = \"907e432cd3d74554b29582eb58756277\";\n  var ciCsB64 = \"OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\"\n  var redirect_uri = \"http://localhost:3000/callback\"\n  //var redirect_uri = window.location.origin + window.location.pathname\n  var scopes = 'user-read-private user-read-email user-modify-playback-state user-read-playback-state playlist-modify-public playlist-modify-private';\n\n  var mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\n  mapboxgl.accessToken = 'pk.eyJ1IjoiYXJkYW9ya2luIiwiYSI6ImNrOW9teW8wMzAyNnczbHJ0emVvNHE5dXcifQ.J_P9VwfH6UeYpgG5gw-JJQ';\n\n  if (window.location.search.match(/\\?code/g) !== null) {\n\n    fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        //\"Authorization\": \"Basic \" + ciCsB64,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Accept\": \"application/json\"\n      },\n      body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}&client_id=${client_id}&client_secret=${client_secret}`\n    })\n      .then(res => res.json())\n      .then(result => {\n        localStorage.setItem('create_access_token_result', JSON.stringify(result))\n        localStorage.setItem('access_token', result.access_token)\n        localStorage.setItem('refresh_token', result.refresh_token)\n      })\n      .then(() => {\n        setToken(localStorage.getItem('access_token'))\n        setRefresh(localStorage.getItem('refresh_token'))\n      })\n      .then(() => window.location = window.location.origin + \"/earthify\")\n      .then(() => window.localStorage.setItem('auth', true))\n      .catch(err => console.log(\"acees_token_respone: \", err))\n  }\n\n\n  React.useEffect(() => {\n\n    var map = new mapboxgl.Map({\n      container: 'root',\n      style: \"mapbox://styles/mapbox/light-v10\",\n      zoom: 3\n    });\n\n\n    map.on('click', (e) => {\n\n      if (!window.location.search.match(/\\?code/g) && !auth) {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${encodeURIComponent(scopes)}&show_dialog=true`\n      }\n      else {\n        console.log(\"acces_token: \", accessToken)\n\n\n        function requestToSpotify() {\n\n          fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${e.lngLat.lng.toString()},${e.lngLat.lat.toString()}.json?&access_token=${mapboxgl.accessToken}`, {\n            method: \"GET\",\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })\n            .then(res =>\n              res.json()\n            )\n            .then(result => {\n              result.features.map(feature => {\n\n                if (feature.place_type[0] === \"country\") {\n                  console.log(\"map_results: \", feature)\n\n                  fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(`${feature.text} top 50`)}&type=playlist`, {\n\n                    method: \"GET\",\n                    headers: {\n                      'Authorization': `Bearer ${accessToken}`,\n                    }\n                  })\n                    .then(res => res.json())\n                    .then(result => {\n                      if (result.error && result.error.status === 401) {\n                        refreshToken()\n                      }\n                      console.log(\"search_results: \", result)\n\n\n                      var playlists = []\n                      var playlist = []\n                      result.playlists.items.map(item => {\n                        if (item.owner.display_name === \"Top 50 Playlists\") {\n                          playlists.push(item)\n                        } else if (item.owner.display_name === \"spotifycharts\") {\n                          playlists.push(item)\n                        } else if (item.name.match(/top\\ 50/gi)) {\n                          playlists.push(item)\n                        }\n                      })\n\n                      if (playlists.length > 1) {\n                        playlist = playlists[0]\n                      } else {\n                        playlist = playlists\n                      }\n\n                      if (Object.keys(playlist).length > 0) {\n\n                        setPlaylist(playlists)\n\n                        console.log(\"top_fifth_playlists: \", playlist)\n\n                        fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n                          method: \"GET\",\n                          headers: {\n                            'Authorization': 'Bearer ' + accessToken\n                          }\n                        })\n                          .then(res => res.json())\n                          .then(result => {\n                            if (result.error && result.error.status === 401) {\n                              refreshToken()\n                            }\n                            console.log(\"all_devices_result: \", result)\n                            if (result.devices.length === 0) {\n                              alert('Please run Spotify App in your device.')\n                            }\n                            var deviceArr = []\n                            result.devices.map(device => {\n                              if (device.is_active === true) {\n                                deviceArr.push(device.id)\n                              }\n                              return deviceArr\n                            })\n                            console.log(\"active_devices_array: \", deviceArr)\n                            if (deviceArr.length > 0) {\n                              console.log(\"active device found!\")\n                              fetch(\"https://api.spotify.com/v1/me/player/play?\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': `Bearer ${accessToken}`,\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\",\n                                },\n                                body: JSON.stringify({ context_uri: playlist.uri })\n                              })\n                                .then((response) => response.json())\n                                .then(result => {\n                                  if (result.error && result.error.status === 401) {\n                                    refreshToken()\n                                  }\n                                  console.log(\"player_result: \", result)\n                                })\n                                .catch(err => console.log(\"player_err: \", err))\n                            } else if (deviceArr.length === 0) {\n                              console.log(\"there is no active device. first found device is activating...\")\n                              fetch(\"https://api.spotify.com/v1/me/player\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': 'Bearer ' + accessToken,\n                                  'Content-Type': 'application/json',\n                                  'Accept': 'application/json'\n                                },\n                                body: JSON.stringify({ device_ids: [deviceArr[0]], \"play\": true })\n                              })\n                                .then(res => res.json())\n                                .then(result => {\n                                  if (result.error && result.error.status === 401) {\n                                    refreshToken()\n                                  } else if (result.error && result.error.status === 404) {\n                                    alert('Please run Spotify App in your device.')\n                                  }\n                                  console.log(\"activate_device_result: \", result)\n                                })\n                            }\n                          })\n                          .catch(err => console.log(\"device_err: \", err))\n                      } else if (Object.keys(playlist).length === 0) {\n                        console.log(\"there is no top 50 playlist for this country\")\n                        if (window.confirm(`There is any Top 50 playlist for ${feature.text}\\nDo you wanna create one?`)) {\n                          let isPublic\n                          if (window.confirm(\"Do you wanna make it public?\")) {\n                            isPublic = true\n                          } else {\n                            isPublic = false\n                          }\n                          fetch(\"https://api.spotify.com/v1/me\", {\n                            method: \"GET\",\n                            headers: {\n                              \"Authorization\": \"Bearer \" + accessToken\n                            }\n                          })\n                            .then(res => res.json())\n                            .then(result => {\n                              console.log(\"current_user_info: \", result)\n                              fetch(`https://api.spotify.com/v1/users/${result.id}/playlists`, {\n                                method: \"POST\",\n                                headers: {\n                                  'Authorization': 'Bearer ' + accessToken,\n                                  'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify({ name: `${feature.text} Top 50`, public: isPublic, description: \"Created via Earthify\" })\n                              })\n                                .then(res => res.json())\n                                .then(result => {\n                                  console.log(\"create_playlist_result: \", result)\n                                  alert(`Congratulaitons! You've just created a playlist name ${feature.text} Top 50\\nThe Spotify URI of your playtlist is ${result.uri}\\nLet's add some tracks.\\nMay the followers be with you! ;)`)\n                                })\n                            })\n                        }\n                      }\n                      return playlist\n                    })\n                    .catch(err => console.log(\"search_err: \", err))\n                }\n                return feature\n              })\n            })\n            .catch((err) => {\n              console.log(\"map_err: \", err)\n            })\n        }\n        function refreshToken() {\n          console.log(\"access token is refreshing...\")\n\n          fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: {\n              \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6ZjJhZjc4MjVhOTA1NGNiNWE5MmMwZDZlMWEwNDAwNTY=\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n              \"Accept\": \"application/json\"\n            },\n            body: `grant_type=refresh_token&refresh_token=${refresh}`\n          })\n            .then(res => res.json())\n            .then(result => {\n              console.log(\"updating access token...\")\n              localStorage.setItem('access_token', result.access_token)\n            })\n            .then(() => console.log(\"acess token were refresh\\nnew access token: \", localStorage.getItem('access_token')))\n            .then(() => requestToSpotify())\n            .then(() => window.location.reload())\n        }\n\n        requestToSpotify()\n      }\n    })\n\n\n  }, [])\n\n\n\n\n  var handleChangePlaylist = (playlist) => {\n\n    fetch(\"https://api.spotify.com/v1/me/player/play\", {\n      method: \"PUT\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\n      },\n      body: JSON.stringify({ context_uri: playlist.uri })\n    })\n      .then(res => res)\n      .then(result => console.log(result))\n  }\n\n\n\n  return (\n    <>\n      <div className=\"settings\">\n        <div>\n            {/* <button>Aç Kapa</button> */}\n        </div>\n        <div>\n          <ul>\n            {playlistStore !== undefined ?\n              playlistStore.map(playlist => {\n                return <li onClick={() => handleChangePlaylist(playlist)} key={playlist.id}>{playlist.name}</li>\n              }) : null\n            }\n          </ul>\n        </div>\n      </div>\n      <div id=\"map\" className=\"App\">\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}