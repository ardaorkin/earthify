{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","React","useState","setEarth","localStorage","getItem","accessToken","setToken","window","auth","refresh","setRefresh","location","origin","redirect_uri","pathname","mapboxgl","require","search","match","a","setItem","split","fetch","method","headers","body","then","res","json","result","access_token","refresh_token","catch","err","console","log","afterAuthorize","useEffect","map","Map","container","style","zoom","on","e","lngLat","lng","toString","lat","features","feature","place_type","encodeURIComponent","text","error","message","playlists","items","item","owner","display_name","uri","devices","JSON","stringify","context_uri","response","data","id","className","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e6f038e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App(props) {\n  const [earth, setEarth] = React.useState()\n  const [accessToken, setToken] = React.useState(localStorage.getItem('access_token'))\n  const [auth, setAuth] = React.useState(window.localStorage.getItem('auth'))\n  const [refresh, setRefresh] = React.useState(localStorage.getItem('refresh_token'))\n  const [code, setCode] = React.useState(localStorage.getItem(\"code\"))\n  const [light, setLight] = React.useState(true)\n  const [settings, setSettings] = React.useState(false)\n\n  let mapStyle\n  if (light === true) {\n    mapStyle = \"light\"\n  } else if (light === false) {\n    mapStyle = \"dark\"\n  }\n\n  var client_id = '9e71a4da3ee24d31ab4fd842607cce9e';\n  if (window.location.origin != \"http://localhost:3000\") {\n    var redirect_uri = window.location.origin + window.location.pathname\n  } else {\n    var redirect_uri = window.location.origin + \"/callback\"\n  }\n  var scopes = 'user-modify-playback-state user-read-playback-state';\n\n\n  var mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\n  mapboxgl.accessToken = 'pk.eyJ1IjoiYXJkYW9ya2luIiwiYSI6ImNrOW9teW8wMzAyNnczbHJ0emVvNHE5dXcifQ.J_P9VwfH6UeYpgG5gw-JJQ';\n\n  if (window.location.search.match(/\\?code/g) !== null) {\n    async function afterAuthorize() {\n      await window.localStorage.setItem('auth', true)\n      await localStorage.setItem(\"code\", window.location.search.split(\"=\")[1])\n      await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6ZjJhZjc4MjVhOTA1NGNiNWE5MmMwZDZlMWEwNDAwNTY=\",\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          \"Accept\": \"application/json\"\n        },\n        body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}`\n      })\n        .then(res => res.json())\n        .then(result => {\n          localStorage.setItem('access_token', result.access_token)\n          localStorage.setItem('refresh_token', result.refresh_token)\n        })\n        .then(() => {\n          setToken(localStorage.getItem('access_token'))\n          setRefresh(localStorage.getItem('refresh_token'))\n        })\n        .then(() => window.location = window.location.origin + \"/earthify\")\n        .catch(err => console.log(\"acees_token_respone: \", err))\n    }\n    afterAuthorize()\n  }\n\n\n  React.useEffect(() => {\n    var map = new mapboxgl.Map({\n      container: 'root',\n      style: \"mapbox://styles/mapbox/light-v10\",\n      zoom: 3\n    });\n    setEarth(map)\n    map.on('click', (e) => {\n      if (!window.location.search.match(/\\?code/g) && !auth) {\n        window.location = \"https://accounts.spotify.com/authorize?client_id=\" + client_id + \"&response_type=code\" + \"&redirect_uri=\" + encodeURIComponent(redirect_uri) + \"&scope=\" + encodeURIComponent(scopes) + \"&show_dialog=true\"\n      }\n      else {\n        console.log(\"acces_token: \", accessToken)\n\n        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${e.lngLat.lng.toString()},${e.lngLat.lat.toString()}.json?&access_token=${mapboxgl.accessToken}`, {\n          method: \"GET\",\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n          .then(res =>\n            res.json()\n          )\n          .then(result => {\n            result.features.map(feature => {\n              if (feature.place_type[0] === \"country\") {\n                fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(`${feature.text} top 50`)}&type=playlist`, {\n                  method: \"GET\",\n                  headers: {\n                    'Authorization': `Bearer ${accessToken}`,\n                  }\n                })\n                  .then(res => res.json())\n                  .then(result => {\n                    console.log(\"search_results: \", result)\n                    if (result.error) {\n                      if (result.error.message === \"The access token expired\") {\n                        fetch(\"https://accounts.spotify.com/api/token\", {\n                          method: \"POST\",\n                          headers: {\n                            \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6ZjJhZjc4MjVhOTA1NGNiNWE5MmMwZDZlMWEwNDAwNTY=\",\n                            \"Content-Type\": \"application/x-www-form-urlencoded\",\n                            \"Accept\": \"application/json\"\n                          },\n                          body: `grant_type=refresh_token&refresh_token=${refresh}`\n                        })\n                          .then(res => res.json())\n                          .then(result => setToken(result.access_token))\n                      } else {\n                        console.log(\"search_result_err: \", result)\n                      }\n                    } else {\n                      result.playlists.items.map(item => {\n                        if (item.owner.display_name === \"Top 50 Playlists\") {\n                          console.log(\"top_fifth_playlists: \", item.uri)\n                          fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n                            method: \"GET\",\n                            headers: {\n                              'Authorization': 'Bearer ' + accessToken\n                            }\n                          })\n                            .then(res => res.json())\n                            .then(result => {\n                              console.log(result.devices)\n                              fetch(\"https://api.spotify.com/v1/me/player/play?\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': `Bearer ${accessToken}`,\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\",\n                                },\n                                body: JSON.stringify({ context_uri: item.uri })\n                              })\n                                .then((response) => response.json())\n                                .then(data => console.log(\"player_result: \", data))\n                                .catch(err => console.log(\"player_err: \", err))\n                            }\n                            )\n                            .catch(err => console.log(\"device_err: \", err))\n                        }\n                      })\n                    }\n                  })\n                  .catch(err => console.log(\"search_err: \", err))\n\n              }\n            })\n          })\n          .catch((err) => {\n            console.log(\"map_err: \", err)\n          })\n      }\n    })\n\n  }, [])\n\n  var handleMapColor = (e) => {\n    e.preventDefault()\n    setLight(!light)\n    if (light === true) {\n      earth.setStyle(\"mapbox://styles/mapbox/light-v10\")\n    } else if (light === false) {\n      earth.setStyle(\"mapbox://styles/mapbox/dark-v10\")\n    }\n  }\n\n  var handleSettings = (e) => {\n    e.preventDefault()\n    setSettings(!settings)\n  }\n\n  return (\n    <>\n      <div id=\"map\" className=\"App\">\n      {/* {\n        settings === true ? <>\n          <div id=\"left-frame\">\n            <div className=\"btn-grp\">\n              <button className=\"colorize-button\" onClick={light === false ? handleMapColor : null}>Dark</button>\n              <button className=\"colorize-button\" onClick={light === true ? handleMapColor : null}>Light</button>\n            </div>\n            <div id=\"toggle-settings\">\n              <i class=\"fas fa-sliders-h\" style={{ marginTop: \"2px\" }} onClick={handleSettings}></i>\n            </div>\n          </div>\n        </> :\n          <div id=\"toggle-settings\">\n            <i class=\"fas fa-sliders-h\" style={{ marginTop: \"2px\" }} onClick={handleSettings}></i>\n          </div>\n      } */}\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}