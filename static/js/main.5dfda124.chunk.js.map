{"version":3,"sources":["magnifier.png","earthmusic.png","settings.png","components/Songs.js","App.js","Intro.js","serviceWorker.js","index.js"],"names":["module","exports","Songs","props","handlePlaySong","e","fetch","method","headers","localStorage","getItem","body","JSON","stringify","uris","then","res","result","console","log","status","alert","state","playlist","bind","this","playlist_id","json","undefined","error","setItem","access_token","window","location","reload","setState","items","map","el","key","track","id","onClick","uri","className","name","artists","artist","React","Component","App","mapStyle","useState","accessToken","setToken","auth","refresh","setRefresh","playlistStore","setPlaylist","earth","setEarth","dark","setDark","searchCountry","setSearch","openSettings","setSettings","songsComponent","setSongsComponent","showSongs","setShowSongs","client_id","mapboxgl","require","search","match","split","refresh_token","origin","catch","err","useEffect","Map","container","style","zoom","on","refreshToken","lngLat","lng","toString","lat","features","feature","place_type","encodeURIComponent","text","playlists","item","owner","display_name","push","length","Object","keys","devices","deviceArr","device","is_active","context_uri","response","device_ids","isPublic","confirm","public","description","handleChangePlaylist","handleSearchCountry","setCenter","geometry","coordinates","setZoom","handleSongs","textAlign","display","type","value","onKeyDown","onChange","preventDefault","target","src","magnifier","alt","currentMapStyle","getStyle","setStyle","handleStyleMap","parse","Intro","redirect_uri","pathname","earthmusic","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5dfda124.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/magnifier.5792a2ef.png\";","module.exports = __webpack_public_path__ + \"static/media/earthmusic.21749bcf.png\";","module.exports = __webpack_public_path__ + \"static/media/settings.39b8785e.png\";","import React from 'react'\n\nclass Songs extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            playlist: null\n        }\n        this.handlePlaySong = this.handlePlaySong.bind(this)\n    }\n\n\n    componentDidMount() {\n        fetch(`https://api.spotify.com/v1/playlists/${this.props.playlist_id}/tracks`, {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${localStorage.getItem('access_token')}`\n            }\n        })\n            .then(res => res.json())\n            .then(result => {\n                if (result.error !== undefined) {\n\n                    if (result.error.status === 401) {\n                        fetch(\"https://accounts.spotify.com/api/token\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\",\n                                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                                \"Accept\": \"application/json\"\n                            },\n                            body: `grant_type=refresh_token&refresh_token=${localStorage.getItem('refresh_token')}`\n                        })\n                            .then(res => res.json())\n                            .then(result => {\n                                console.log(\"updating access token...\")\n                                localStorage.setItem('access_token', result.access_token)\n                            })\n                            .then(() => console.log(\"acess token were refresh\\nnew access token: \", localStorage.getItem('access_token')))\n                            .then(() => window.location.reload())\n                    }\n                }\n                this.setState({\n                    playlist: result\n                })\n            })\n    }\n\n    handlePlaySong = (e) => {\n        fetch(`https://api.spotify.com/v1/me/player/play`, {\n            method: \"PUT\",\n            headers: {\n                \"Authorization\": `Bearer ${localStorage.getItem('access_token')}`,\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify({ uris: [e] })\n        })\n            .then(res => res)\n            .then(result => {\n                console.log(\"song_playing: \", result)\n                if(result.status === 404) {\n                    alert('Please open Spotify App in your device')\n                }\n            })\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.playlist != null ?\n                    this.state.playlist.items.map(el => {\n                        return <li key={el.track.id} onClick={() => this.handlePlaySong(el.track.uri)} className=\"songs-list\">{el.track.name} - {el.track.artists.map(artist => {\n                            return artist.name\n                        })}</li>\n                    })\n                    : null}\n            </>\n        )\n    }\n}\n\nexport default Songs","/*\n    This file is part of Earthify.\n\n    Earthify is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    Earthify is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with Earthify.  If not, see <https://www.gnu.org/licenses/>.\n*/\nimport React from 'react';\nimport './App.css';\nimport magnifier from './magnifier.png'\nimport settings from './settings.png'\nimport Songs from './components/Songs'\n\nfunction App(props) {\n  const mapStyle = localStorage.getItem(\"map_style\") || \"light\"\n  const access_token = localStorage.getItem('access_token') || \"\"\n  const [accessToken, setToken] = React.useState(access_token)\n  const [auth, setAuth] = React.useState(window.localStorage.getItem('auth'))\n  const [refresh, setRefresh] = React.useState(localStorage.getItem('refresh_token'))\n  const [playlistStore, setPlaylist] = React.useState()\n  const [earth, setEarth] = React.useState()\n  const [dark, setDark] = React.useState(mapStyle)\n  const [searchCountry, setSearch] = React.useState()\n  const [openSettings, setSettings] = React.useState(true)\n  const [songsComponent, setSongsComponent] = React.useState()\n  const [showSongs, setShowSongs] = React.useState(null)\n\n  var client_id = \"9e71a4da3ee24d31ab4fd842607cce9e\";\n  var client_secret = \"907e432cd3d74554b29582eb58756277\";\n  var ciCsB64 = \"OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\"\n  var redirect_uri = \"http://localhost:3000\" + \"/callback\"\n  //var redirect_uri = window.location.origin + window.location.pathname\n  var scopes = 'user-read-private user-read-email user-modify-playback-state user-read-playback-state playlist-modify-public playlist-modify-private';\n\n  var mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\n  mapboxgl.accessToken = 'pk.eyJ1IjoiYXJkYW9ya2luIiwiYSI6ImNrOW9teW8wMzAyNnczbHJ0emVvNHE5dXcifQ.J_P9VwfH6UeYpgG5gw-JJQ';\n\n  if (window.location.search.match(/\\?code/g) !== null) {\n\n    fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        //\"Authorization\": \"Basic \" + ciCsB64,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Accept\": \"application/json\"\n      },\n      body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}&client_id=${client_id}&client_secret=${client_secret}`\n    })\n      .then(res => res.json())\n      .then(result => {\n        localStorage.setItem('create_access_token_result', JSON.stringify(result))\n        localStorage.setItem('access_token', result.access_token)\n        localStorage.setItem('refresh_token', result.refresh_token)\n      })\n      .then(() => {\n        setToken(localStorage.getItem('access_token'))\n        setRefresh(localStorage.getItem('refresh_token'))\n      })\n      .then(() => window.location = window.location.origin + \"/earthify\")\n      .then(() => window.localStorage.setItem('auth', true))\n      .catch(err => console.log(\"acees_token_respone: \", err))\n  }\n\n\n  React.useEffect(() => {\n\n    var map = new mapboxgl.Map({\n      container: 'root',\n      style: `mapbox://styles/mapbox/${dark}-v10`,\n      zoom: 3\n    });\n\n    setEarth(map)\n\n\n    map.on('click', (e) => {\n\n      if (!window.location.search.match(/\\?code/g) && !auth) {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${encodeURIComponent(scopes)}&show_dialog=true`\n      }\n      else {\n        console.log(\"acces_token: \", accessToken)\n\n\n        function requestToSpotify() {\n\n          fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${e.lngLat.lng.toString()},${e.lngLat.lat.toString()}.json?&access_token=${mapboxgl.accessToken}`, {\n            method: \"GET\",\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })\n            .then(res =>\n              res.json()\n            )\n            .then(result => {\n              result.features.map(feature => {\n\n                if (feature.place_type[0] === \"country\") {\n                  console.log(\"map_results: \", feature)\n\n                  fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(`${feature.text} top 50`)}&type=playlist`, {\n\n                    method: \"GET\",\n                    headers: {\n                      'Authorization': `Bearer ${accessToken}`,\n                    }\n                  })\n                    .then(res => res.json())\n                    .then(result => {\n                      if (result.error && result.error.status === 401) {\n                        refreshToken()\n                      }\n                      console.log(\"search_results: \", result)\n\n\n                      var playlists = []\n                      var playlist = []\n                      result.playlists.items.map(item => {\n                        if (item.owner.display_name === \"Top 50 Playlists\") {\n                          playlists.push(item)\n                        } else if (item.owner.display_name === \"spotifycharts\") {\n                          playlists.push(item)\n                        } else if (item.name.match(/top\\ 50/gi)) {\n                          playlists.push(item)\n                        }\n                      })\n\n                      if (playlists.length > 1) {\n                        playlist = playlists[0]\n                      } else {\n                        playlist = playlists\n                      }\n\n                      if (Object.keys(playlist).length > 0) {\n\n                        setPlaylist(playlists)\n\n                        localStorage.setItem(\"countrys_top_fifths\", JSON.stringify(playlists))\n\n                        console.log(\"top_fifth_playlists: \", playlist)\n\n                        fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n                          method: \"GET\",\n                          headers: {\n                            'Authorization': 'Bearer ' + accessToken\n                          }\n                        })\n                          .then(res => res.json())\n                          .then(result => {\n                            if (result.error && result.error.status === 401) {\n                              refreshToken()\n                            }\n                            console.log(\"all_devices_result: \", result)\n                            if (result.devices.length === 0) {\n                              alert('Please open Spotify App in your device')\n                            }\n                            var deviceArr = []\n                            result.devices.map(device => {\n                              if (device.is_active === true) {\n                                deviceArr.push(device.id)\n                              }\n                              return deviceArr\n                            })\n                            console.log(\"active_devices_array: \", deviceArr)\n                            if (deviceArr.length > 0) {\n                              console.log(\"active device found!\")\n                              fetch(\"https://api.spotify.com/v1/me/player/play?\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': `Bearer ${accessToken}`,\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\",\n                                },\n                                body: JSON.stringify({ context_uri: playlist.uri })\n                              })\n                                .then((response) => response.json())\n                                .then(result => {\n                                  if (result.error && result.error.status === 401) {\n                                    refreshToken()\n                                  }\n                                  console.log(\"player_result: \", result)\n                                })\n                                .catch(err => console.log(\"player_err: \", err))\n                            } else if (deviceArr.length === 0) {\n                              console.log(\"there is no active device. first found device is activating...\")\n                              fetch(\"https://api.spotify.com/v1/me/player\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': 'Bearer ' + accessToken,\n                                  'Content-Type': 'application/json',\n                                  'Accept': 'application/json'\n                                },\n                                body: JSON.stringify({ device_ids: [deviceArr[0]], \"play\": true })\n                              })\n                                .then(res => res.json())\n                                .then(result => {\n                                  if (result.error && result.error.status === 401) {\n                                    refreshToken()\n                                  }\n                                  else if (result.error && result.error.status === 404) {\n                                    alert('Please open Spotify App in your device')\n                                  }\n                                  console.log(\"activate_device_result: \", result)\n                                })\n                            }\n                          })\n                          .catch(err => console.log(\"device_err: \", err))\n                      } else if (Object.keys(playlist).length === 0) {\n                        console.log(\"there is no top 50 playlist for this country\")\n                        if (window.confirm(`There isn't any Top 50 playlist for ${feature.text}.\\nDo you wanna create one?`)) {\n                          let isPublic\n                          if (window.confirm(\"Do you wanna make it public?\")) {\n                            isPublic = true\n                          } else {\n                            isPublic = false\n                          }\n                          fetch(\"https://api.spotify.com/v1/me\", {\n                            method: \"GET\",\n                            headers: {\n                              \"Authorization\": \"Bearer \" + accessToken\n                            }\n                          })\n                            .then(res => res.json())\n                            .then(result => {\n                              console.log(\"current_user_info: \", result)\n                              fetch(`https://api.spotify.com/v1/users/${result.id}/playlists`, {\n                                method: \"POST\",\n                                headers: {\n                                  'Authorization': 'Bearer ' + accessToken,\n                                  'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify({ name: `${feature.text} Top 50`, public: isPublic, description: \"Created via Earthify\" })\n                              })\n                                .then(res => res.json())\n                                .then(result => {\n                                  console.log(\"create_playlist_result: \", result)\n                                  alert(`Congratulaitons! You've just created a playlist named ${feature.text} Top 50!\\nThe Spotify URI of your playtlist is ${result.uri}\\nLet's add some tracks.\\nMay the followers be with you! ;)`)\n                                })\n                            })\n                        }\n                      }\n                      return playlist\n                    })\n                    .catch(err => console.log(\"search_err: \", err))\n                }\n                return feature\n              })\n            })\n            .catch((err) => {\n              console.log(\"map_err: \", err)\n            })\n        }\n        function refreshToken() {\n          console.log(\"access token is refreshing...\")\n\n          fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: {\n              \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n              \"Accept\": \"application/json\"\n            },\n            body: `grant_type=refresh_token&refresh_token=${refresh}`\n          })\n            .then(res => res.json())\n            .then(result => {\n              console.log(\"updating access token...\")\n              localStorage.setItem('access_token', result.access_token)\n            })\n            .then(() => console.log(\"acess token were refresh\\nnew access token: \", localStorage.getItem('access_token')))\n            .then(() => window.location.reload())\n        }\n\n        requestToSpotify()\n      }\n    })\n\n\n  }, [])\n\n  var handleStyleMap = () => {\n    var currentMapStyle = earth.getStyle()\n    if (currentMapStyle.name === \"Mapbox Light\") {\n      earth.setStyle(\"mapbox://styles/mapbox/dark-v10\")\n      localStorage.setItem(\"map_style\", \"dark\")\n      setDark(localStorage.getItem(\"map_style\"))\n    } else if (currentMapStyle.name === \"Mapbox Dark\") {\n      earth.setStyle(\"mapbox://styles/mapbox/light-v10\")\n      localStorage.setItem(\"map_style\", \"light\")\n      setDark(localStorage.getItem(\"map_style\"))\n    }\n  }\n\n  var handleChangePlaylist = (playlist) => {\n\n    fetch(\"https://api.spotify.com/v1/me/player/play\", {\n      method: \"PUT\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\n      },\n      body: JSON.stringify({ context_uri: playlist.uri })\n    })\n      .then(res => res)\n      .then(result => {\n        console.log(\"pick_playlist_from_the_list: \", result)\n        if (result.status === 401) {\n          fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: {\n              \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n              \"Accept\": \"application/json\"\n            },\n            body: `grant_type=refresh_token&refresh_token=${refresh}`\n          })\n            .then(res => res.json())\n            .then(result => {\n              console.log(\"updating access token...\")\n              localStorage.setItem('access_token', result.access_token)\n            })\n            .then(() => console.log(\"acess token were refresh\\nnew access token: \", localStorage.getItem('access_token')))\n            .then(() => window.location.reload())\n        }\n      })\n  }\n\n\n  var handleSearchText = (e) => {\n    e.preventDefault()\n    setSearch(e.target.value)\n  }\n\n  var handleSearchCountry = (e) => {\n    fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(e)}.json?&access_token=${mapboxgl.accessToken}`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => res.json())\n      .then(result => {\n        console.log(\"searched_country_result: \", result)\n        earth.setCenter(result.features[0].geometry.coordinates)\n        earth.setZoom(5)\n      })\n  }\n\n  var handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      handleSearchCountry(searchCountry)\n    }\n  }\n\n  var toggleSettings = (e) => {\n    setSettings(!openSettings)\n  }\n\n\n  var handleSongs = (e) => {\n    if (showSongs === e) {\n      setShowSongs(null)\n    } else {\n      var songsComponent = <><Songs playlist_id={e} /></>\n      setSongsComponent(songsComponent)\n      setShowSongs(e)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"settings\" style={{ textAlign: openSettings ? \"end\" : \"initial\" }}>\n        <div className=\"settings-content\" style={{ display: openSettings ? \"block\" : \"none\" }}>\n          <div className=\"modes\">\n            <div className=\"search-form\">\n              <input name=\"search-input\" type=\"text\" className=\"search-input\" value={searchCountry || \"\"} onKeyDown={handleKeyDown} onChange={handleSearchText}></input>\n              <div className=\"search-button\"><input type=\"image\" src={magnifier} alt=\"search\" className=\"icon\" onClick={() => handleSearchCountry(searchCountry)}></input></div>\n            </div>\n            <div>\n              <button className=\"map-style-button\" onClick={() => handleStyleMap()}>{dark === \"light\" ? \"Dark Mode\" : \"Light Mode\"}</button>\n            </div>\n          </div>\n          <div className=\"lists\">\n            <ul>\n              {playlistStore !== undefined ?\n                playlistStore.map(playlist => {\n                  return (\n                    <>\n                      <li key={playlist.id} className=\"playlist-list\">\n                        <div\n                          className=\"li-text\"\n                          onClick={() => handleChangePlaylist(playlist)}>\n                          {playlist.name}\n                        </div>\n                        <button\n                          className=\"songs-button\"\n                          onClick={() => handleSongs(playlist.id)}>{showSongs === playlist.id ? \"▼\" : \"►\"}</button>\n                      </li>\n                      {showSongs === playlist.id ? songsComponent : null}\n                    </>\n                  )\n                }) : localStorage.getItem(\"countrys_top_fifths\") ? JSON.parse(localStorage.getItem(\"countrys_top_fifths\")).map(playlist => {\n                  return (\n                    <>\n                      <li key={playlist.id} className=\"playlist-list\">\n                        <div\n                          className=\"li-text\"\n                          onClick={() => handleChangePlaylist(playlist)}>\n                          {playlist.name}\n                        </div>\n                        <button\n                          className=\"songs-button\"\n                          onClick={() => handleSongs(playlist.id)}>{showSongs === playlist.id ? \"▼\" : \"►\"}</button>\n                      </li>\n                      {showSongs === playlist.id ? songsComponent : null}\n                    </>\n                  )\n                }) : null\n              }\n            </ul>\n\n          </div>\n        </div>\n        <button className=\"toggle-settings\" onClick={toggleSettings}></button>\n      </div>\n      <div id=\"map\" className=\"App\">\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n","import React, { useEffect } from 'react'\nimport earthmusic from './earthmusic.png'\n\nexport default function Intro() {\n\n    var client_id = \"9e71a4da3ee24d31ab4fd842607cce9e\";\n    var client_secret = \"907e432cd3d74554b29582eb58756277\";\n    var ciCsB64 = \"OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\"\n    // var redirect_uri = \"http://localhost:3000/callback\"\n    var redirect_uri = window.location.origin + window.location.pathname\n    var scopes = 'user-read-private user-read-email user-modify-playback-state user-read-playback-state playlist-modify-public playlist-modify-private';\n\n    var handleLogin = () => {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${encodeURIComponent(scopes)}&show_dialog=true`\n    }\n\n    if (window.location.search.match(/\\?code/g) !== null) {\n\n        fetch(\"https://accounts.spotify.com/api/token\", {\n          method: \"POST\",\n          headers: {\n            //\"Authorization\": \"Basic \" + ciCsB64,\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Accept\": \"application/json\"\n          },\n          body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}&client_id=${client_id}&client_secret=${client_secret}`\n        })\n          .then(res => res.json())\n          .then(result => {\n            localStorage.setItem('create_access_token_result', JSON.stringify(result))\n            localStorage.setItem('access_token', result.access_token)\n            localStorage.setItem('refresh_token', result.refresh_token)\n          })\n          .then(() => window.location = window.location.origin + \"/earthify\")\n          .then(() => window.localStorage.setItem('auth', true))\n          .catch(err => console.log(\"acees_token_respone: \", err))\n      }\n\n    return(\n        <div className=\"intro\">\n            <div>\n            <img src={earthmusic} alt=\"earthify-icon\" className=\"intro-icon\"></img>\n            </div>\n            <div>\n            <button className=\"intro-button\" onClick={handleLogin}>Login</button>\n            </div>\n        </div>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Intro from './Intro'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    {localStorage.getItem(\"access_token\") == null ? <Intro /> : <App />}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}