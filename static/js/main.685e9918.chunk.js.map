{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","isAuth","window","localStorage","getItem","React","useState","auth","redirect_uri","location","origin","mapboxgl","require","accessToken","useEffect","Map","container","style","zoom","on","e","hash","setItem","fetch","lngLat","lng","toString","lat","method","headers","then","res","json","result","features","map","feature","place_type","console","log","place_name","catch","err","encodeURIComponent","url","access_token","substr","split","id","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uPAwEeA,MApEf,WACE,IAAMC,EAASC,OAAOC,aAAaC,QAAQ,UAAW,EADzC,EAEWC,IAAMC,SAASL,GAF1B,mBAENM,EAFM,KAKTC,GALS,KAKMN,OAAOO,SAASC,OAAS,aAIxCC,EAAWC,EAAQ,IAkDvB,OAhDAD,EAASE,YAAc,+FAEvBR,IAAMS,WAAU,WAwCd,GAvCU,IAAIH,EAASI,IAAI,CACzBC,UAAW,OACXC,MAAO,kCACPC,KAAM,IAIJC,GAAG,SAAS,SAACC,GACVlB,OAAOO,SAASY,MAASd,GAS5BL,OAAOC,aAAamB,QAAQ,QAAQ,GACpCC,MAAM,qDAAD,OAAsDH,EAAEI,OAAOC,IAAIC,WAAnE,YAAiFN,EAAEI,OAAOG,IAAID,WAA9F,+BAA+Hf,EAASE,aAAe,CAC1Je,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAAAC,GAAG,OACPA,EAAIC,UAELF,MAAK,SAAAG,GACJA,EAAOC,SAASC,KAAI,SAAAC,GACY,YAA1BA,EAAQC,WAAW,IACrBC,QAAQC,IAAIH,EAAQI,kBAIzBC,OAAM,SAACC,GACNJ,QAAQC,IAAIG,OA1BhBnB,MAAM,sHAA8GoB,mBAAmBnC,GAAgB,UAAYmC,mBAjB5J,qCAiByL,oBAAqB,CACnNf,OAAQ,QAEPE,MAAK,SAACC,GACL7B,OAAOO,SAAWsB,EAAIa,UA0B3B1C,OAAOO,SAASY,KAAM,CACvB,IACIwB,EADO3C,OAAOO,SAASY,KAAKyB,OAAO,GACfC,MAAM,KAAK,GAAGA,MAAM,KAAK,GACjDT,QAAQC,IAAIM,MAEb,IAED,oCACE,yBAAKG,GAAG,MAAMC,UAAU,UCrDVC,QACW,cAA7BhD,OAAOO,SAAS0C,UAEe,UAA7BjD,OAAOO,SAAS0C,UAEhBjD,OAAOO,SAAS0C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.685e9918.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nfunction App() {\n  const isAuth = window.localStorage.getItem('auth') || false\n  const [auth, setAuth] = React.useState(isAuth)\n  var baseURI = \"https://api.spotify.com/\"\n  var client_id = '9e71a4da3ee24d31ab4fd842607cce9e'; // Your client id\n  var redirect_uri = window.location.origin + \"/callback\"; // Your redirect uri\n  var scopes = 'user-read-private user-read-email';\n\n\n  var mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\n  mapboxgl.accessToken = 'pk.eyJ1IjoiYXJkYW9ya2luIiwiYSI6ImNrOW9teW8wMzAyNnczbHJ0emVvNHE5dXcifQ.J_P9VwfH6UeYpgG5gw-JJQ';\n\n  React.useEffect(() => {\n    var map = new mapboxgl.Map({\n      container: 'root',\n      style: 'mapbox://styles/mapbox/dark-v10',\n      zoom: 3\n    });\n\n\n    map.on('click', (e) => {\n      if (!window.location.hash && !auth) {\n        fetch(\"https://accounts.spotify.com/authorize?client_id=\" + client_id + \"&response_type=token\" + \"&redirect_uri=\" + encodeURIComponent(redirect_uri) + \"&scope=\" + encodeURIComponent(scopes) + \"&show_dialog=true\", {\n          method: \"GET\"\n        })\n          .then((res) => {\n            window.location = res.url\n          })\n      }\n      else {\n        window.localStorage.setItem('auth', true)\n        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${e.lngLat.lng.toString()},${e.lngLat.lat.toString()}.json?&access_token=${mapboxgl.accessToken}`, {\n          method: \"GET\",\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n          .then(res =>\n            res.json()\n          )\n          .then(result => {\n            result.features.map(feature => {\n              if (feature.place_type[0] === \"country\") {\n                console.log(feature.place_name)\n              }\n            })\n          })\n          .catch((err) => {\n            console.log(err)\n          })\n      }\n    })\n    if(window.location.hash) {\n      var hash = window.location.hash.substr(1); //url of the current page\n      var access_token = hash.split('=')[1].split('&')[0]; //this creates an array with key ([0] element) and value ([1] element)\n      console.log(access_token)\n    }\n  }, [])\n  return (\n    <>\n      <div id=\"map\" className=\"App\">\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}