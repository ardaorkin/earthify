{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","redirect_uri","access_token","localStorage","getItem","React","useState","accessToken","setToken","window","auth","refresh","setRefresh","location","origin","pathname","mapboxgl","require","search","match","a","setItem","fetch","method","headers","body","split","then","res","json","result","refresh_token","catch","err","console","log","afterAuthorize","useEffect","Map","container","style","zoom","on","e","requestToSpotify","lngLat","lng","toString","lat","features","map","feature","place_type","encodeURIComponent","text","error","status","refreshToken","playlists","playlist","items","item","owner","display_name","name","push","length","devices","alert","deviceArr","device","is_active","id","JSON","stringify","context_uri","uri","response","device_ids","className","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9d97a096.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App(props) {\n  const access_token = localStorage.getItem('access_token') || \"\"\n  const [accessToken, setToken] = React.useState(access_token)\n  const [auth, setAuth] = React.useState(window.localStorage.getItem('auth'))\n  const [refresh, setRefresh] = React.useState(localStorage.getItem('refresh_token'))\n  const [light, setLight] = React.useState(true)\n\n\n  let mapStyle\n  if (light === true) {\n    mapStyle = \"light\"\n  } else if (light === false) {\n    mapStyle = \"dark\"\n  }\n\n  var client_id = '9e71a4da3ee24d31ab4fd842607cce9e';\n  var redirect_uri\n  if (window.location.origin !== \"http://localhost:3000\") {\n    redirect_uri = window.location.origin + window.location.pathname\n  } else {\n    redirect_uri = window.location.origin + \"/callback\"\n  }\n  var scopes = 'user-modify-playback-state user-read-playback-state';\n\n\n  var mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\n  mapboxgl.accessToken = 'pk.eyJ1IjoiYXJkYW9ya2luIiwiYSI6ImNrOW9teW8wMzAyNnczbHJ0emVvNHE5dXcifQ.J_P9VwfH6UeYpgG5gw-JJQ';\n\n  if (window.location.search.match(/\\?code/g) !== null) {\n    async function afterAuthorize() {\n      await window.localStorage.setItem('auth', true)\n      await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6ZjJhZjc4MjVhOTA1NGNiNWE5MmMwZDZlMWEwNDAwNTY=\",\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          \"Accept\": \"application/json\"\n        },\n        body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}`\n      })\n        .then(res => res.json())\n        .then(result => {\n          localStorage.setItem('access_token', result.access_token)\n          localStorage.setItem('refresh_token', result.refresh_token)\n        })\n        .then(() => {\n          setToken(localStorage.getItem('access_token'))\n          setRefresh(localStorage.getItem('refresh_token'))\n        })\n        .then(() => window.location = window.location.origin + \"/earthify\")\n        .catch(err => console.log(\"acees_token_respone: \", err))\n    }\n    afterAuthorize()\n  }\n\n\n  React.useEffect(() => {\n\n\n    var map = new mapboxgl.Map({\n      container: 'root',\n      style: \"mapbox://styles/mapbox/light-v10\",\n      zoom: 3\n    });\n\n    map.on('click', (e) => {\n      if (!window.location.search.match(/\\?code/g) && !auth) {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${encodeURIComponent(scopes)}&show_dialog=true`\n      }\n      else {\n        console.log(\"acces_token: \", accessToken)\n\n\n        function requestToSpotify() {\n\n          fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${e.lngLat.lng.toString()},${e.lngLat.lat.toString()}.json?&access_token=${mapboxgl.accessToken}`, {\n            method: \"GET\",\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })\n            .then(res =>\n              res.json()\n            )\n            .then(result => {\n              result.features.map(feature => {\n                if (feature.place_type[0] === \"country\") {\n                  fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(`${feature.text} top 50`)}&type=playlist`, {\n                    method: \"GET\",\n                    headers: {\n                      'Authorization': `Bearer ${accessToken}`,\n                    }\n                  })\n                    .then(res => res.json())\n                    .then(result => {\n                      console.log(\"search_results: \", result)\n                      if (result.error && result.error.status === 401) {\n                        refreshToken()\n                      }\n\n                      var playlists = []\n                      var playlist = []\n                      result.playlists.items.map(item => {\n                        if (item.owner.display_name === \"Top 50 Playlists\") {\n                          playlists.push(item)\n                        } else if (item.owner.display_name === \"spotifycharts\") {\n                          playlists.push(item)\n                        } else if (item.name.match(/top\\ 50/gi)) {\n                          playlists.push(item)\n                        }\n                      })\n\n                      if (playlists.length > 1) {\n                        playlist = playlists[0]\n                      } else {\n                        playlist = playlists\n                      }\n\n                      console.log(\"top_fifth_playlists: \", playlist)\n                      fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n                        method: \"GET\",\n                        headers: {\n                          'Authorization': 'Bearer ' + accessToken\n                        }\n                      })\n                        .then(res => res.json())\n                        .then(result => {\n                          console.log(\"all_devices_result: \", result)\n                          if (result.error && result.error.status === 401) {\n                            refreshToken()\n                          }\n                          if (result.devices.length === 0) {\n                            alert('Please run Spotify App in your device.')\n                          }\n                          var deviceArr = []\n                          result.devices.map(device => {\n                            if (device.is_active === true) {\n                              deviceArr.push(device.id)\n                            }\n                            return deviceArr\n                          })\n                          console.log(\"active_devices_array: \", deviceArr)\n                          if (deviceArr.length > 0) {\n                            console.log(\"active device found!\")\n                            fetch(\"https://api.spotify.com/v1/me/player/play?\", {\n                              method: \"PUT\",\n                              headers: {\n                                'Authorization': `Bearer ${accessToken}`,\n                                \"Content-Type\": \"application/json\",\n                                \"Accept\": \"application/json\",\n                              },\n                              body: JSON.stringify({ context_uri: playlist.uri })\n                            })\n                              .then((response) => response.json())\n                              .then(result => {\n                                console.log(\"player_result: \", result)\n                                if (result.error && result.error.status === 401) {\n                                  refreshToken()\n                                }\n                              })\n                              .catch(err => console.log(\"player_err: \", err))\n                          } else if (deviceArr.length === 0) {\n                            console.log(\"there is no active device. first found device is activating...\")\n                            fetch(\"https://api.spotify.com/v1/me/player\", {\n                              method: \"PUT\",\n                              headers: {\n                                'Authorization': 'Bearer ' + accessToken,\n                                'Content-Type': 'application/json',\n                                'Accept': 'application/json'\n                              },\n                              body: JSON.stringify({ device_ids: [deviceArr[0]], \"play\": true })\n                            })\n                              .then(res => res.json())\n                              .then(result => {\n                                console.log(\"activate_device_result: \", result)\n                                if (result.error && result.error.status === 401) {\n                                  refreshToken()\n                                }\n                              })\n                          }\n                        })\n                        .catch(err => console.log(\"device_err: \", err))\n\n                      return playlist\n                    })\n                    .catch(err => console.log(\"search_err: \", err))\n                }\n                return feature\n              })\n            })\n            .catch((err) => {\n              console.log(\"map_err: \", err)\n            })\n        }\n        function refreshToken() {\n          console.log(\"access token is refreshing...\")\n          fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: {\n              \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6ZjJhZjc4MjVhOTA1NGNiNWE5MmMwZDZlMWEwNDAwNTY=\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n              \"Accept\": \"application/json\"\n            },\n            body: `grant_type=refresh_token&refresh_token=${refresh}`\n          })\n            .then(res => res.json())\n            .then(result => {\n              console.log(\"updating access token...\")\n              localStorage.setItem('access_token', result.access_token)\n            })\n            .then(() => console.log(\"acess token were refresh\\nnew access token: \", localStorage.getItem('access_token')))\n            .then(() => requestToSpotify())\n        }\n\n        requestToSpotify()\n      }\n    })\n\n  }, [])\n\n\n\n  var handleMapColor = (e) => {\n    e.preventDefault()\n    setLight(!light)\n    console.log(light)\n    console.log(mapStyle)\n  }\n\n  return (\n    <>\n      <div id=\"map\" className=\"App\">\n\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}