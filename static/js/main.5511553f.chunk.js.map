{"version":3,"sources":["magnifier.png","earthmusic.png","settings.png","alerts/DeviceAlert.js","App.js","Intro.js","serviceWorker.js","index.js"],"names":["module","exports","DeviceAlert","props","handleConfirmed","setState","display","state","bind","className","style","this","backgroundColor","onClick","React","Component","App","mapStyle","localStorage","getItem","access_token","useState","accessToken","setToken","window","auth","refresh","setRefresh","playlistStore","setPlaylist","earth","setEarth","dark","setDark","searchCountry","setSearch","openSettings","setSettings","deviceAlert","useRef","client_id","mapboxgl","require","location","search","match","fetch","method","headers","body","split","then","res","json","result","setItem","JSON","stringify","refresh_token","origin","catch","err","console","log","useEffect","map","Map","container","zoom","on","e","refreshToken","reload","lngLat","lng","toString","lat","features","feature","place_type","encodeURIComponent","text","error","status","playlists","playlist","items","item","owner","display_name","name","push","length","Object","keys","devices","current","deviceArr","device","is_active","id","context_uri","uri","response","device_ids","isPublic","confirm","public","description","alert","handleChangePlaylist","handleSearchCountry","setCenter","geometry","coordinates","setZoom","ref","textAlign","type","value","onKeyDown","key","onChange","preventDefault","target","src","magnifier","alt","currentMapStyle","getStyle","setStyle","handleStyleMap","undefined","parse","Intro","redirect_uri","pathname","earthmusic","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5511553f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/magnifier.5792a2ef.png\";","module.exports = __webpack_public_path__ + \"static/media/earthmusic.21749bcf.png\";","module.exports = __webpack_public_path__ + \"static/media/settings.39b8785e.png\";","import React, { useEffect } from 'react'\n\nclass DeviceAlert extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            display: \"none\"\n        }\n        this.handleConfirmed = this.handleConfirmed.bind(this)\n    }\n\n    handleConfirmed = () => {\n        this.setState({\n            display: \"none\"\n        })\n    }\n    render() {\n        return (\n            <>\n                <div className=\"alert-component\" style={{ display: this.state.display }}>\n                    <div className=\"alert\">\n                    </div>\n                    <div className=\"alert-card\">\n                        <p className=\"alert-text\">No running app found.<br></br>Please run Spotify App in your device.</p>\n                        <button className=\"alert-button\" style={{ backgroundColor: \"#00a800\" }} onClick={this.handleConfirmed}>OK</button>\n                    </div>\n                </div>\n            </>\n        )\n\n    }\n}\nexport default DeviceAlert","/*\n    This file is part of Earthify.\n\n    Earthify is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    Earthify is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with Earthify.  If not, see <https://www.gnu.org/licenses/>.\n*/\nimport React from 'react';\nimport './App.css';\nimport magnifier from './magnifier.png'\nimport DeviceAlert from './alerts/DeviceAlert'\nimport settings from './settings.png'\n\nfunction App(props) {\n  const mapStyle = localStorage.getItem(\"map_style\") || \"light\"\n  const access_token = localStorage.getItem('access_token') || \"\"\n  const [accessToken, setToken] = React.useState(access_token)\n  const [auth, setAuth] = React.useState(window.localStorage.getItem('auth'))\n  const [refresh, setRefresh] = React.useState(localStorage.getItem('refresh_token'))\n  const [playlistStore, setPlaylist] = React.useState()\n  const [earth, setEarth] = React.useState()\n  const [dark, setDark] = React.useState(mapStyle)\n  const [searchCountry, setSearch] = React.useState()\n  const [openSettings, setSettings] = React.useState(true)\n  const deviceAlert = React.useRef()\n  \n  var client_id = \"9e71a4da3ee24d31ab4fd842607cce9e\";\n  var client_secret = \"907e432cd3d74554b29582eb58756277\";\n  var ciCsB64 = \"OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\"\n  var redirect_uri = \"http://localhost:3000/callback\"\n  //var redirect_uri = window.location.origin + window.location.pathname\n  var scopes = 'user-read-private user-read-email user-modify-playback-state user-read-playback-state playlist-modify-public playlist-modify-private';\n  \n  var mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n  \n  mapboxgl.accessToken = 'pk.eyJ1IjoiYXJkYW9ya2luIiwiYSI6ImNrOW9teW8wMzAyNnczbHJ0emVvNHE5dXcifQ.J_P9VwfH6UeYpgG5gw-JJQ';\n  \n  if (window.location.search.match(/\\?code/g) !== null) {\n    \n    fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        //\"Authorization\": \"Basic \" + ciCsB64,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Accept\": \"application/json\"\n      },\n      body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}&client_id=${client_id}&client_secret=${client_secret}`\n    })\n    .then(res => res.json())\n      .then(result => {\n        localStorage.setItem('create_access_token_result', JSON.stringify(result))\n        localStorage.setItem('access_token', result.access_token)\n        localStorage.setItem('refresh_token', result.refresh_token)\n      })\n      .then(() => {\n        setToken(localStorage.getItem('access_token'))\n        setRefresh(localStorage.getItem('refresh_token'))\n      })\n      .then(() => window.location = window.location.origin + \"/earthify\")\n      .then(() => window.localStorage.setItem('auth', true))\n      .catch(err => console.log(\"acees_token_respone: \", err))\n    }\n    \n    \n    React.useEffect(() => {\n      \n    var map = new mapboxgl.Map({\n      container: 'root',\n      style: `mapbox://styles/mapbox/${dark}-v10`,\n      zoom: 3\n    });\n\n    setEarth(map)\n\n\n    map.on('click', (e) => {\n\n      if (!window.location.search.match(/\\?code/g) && !auth) {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${encodeURIComponent(scopes)}&show_dialog=true`\n      }\n      else {\n        console.log(\"acces_token: \", accessToken)\n\n\n        function requestToSpotify() {\n\n          fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${e.lngLat.lng.toString()},${e.lngLat.lat.toString()}.json?&access_token=${mapboxgl.accessToken}`, {\n            method: \"GET\",\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          })\n            .then(res =>\n              res.json()\n            )\n            .then(result => {\n              result.features.map(feature => {\n\n                if (feature.place_type[0] === \"country\") {\n                  console.log(\"map_results: \", feature)\n\n                  fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(`${feature.text} top 50`)}&type=playlist`, {\n\n                    method: \"GET\",\n                    headers: {\n                      'Authorization': `Bearer ${accessToken}`,\n                    }\n                  })\n                    .then(res => res.json())\n                    .then(result => {\n                      if (result.error && result.error.status === 401) {\n                        refreshToken()\n                      }\n                      console.log(\"search_results: \", result)\n\n\n                      var playlists = []\n                      var playlist = []\n                      result.playlists.items.map(item => {\n                        if (item.owner.display_name === \"Top 50 Playlists\") {\n                          playlists.push(item)\n                        } else if (item.owner.display_name === \"spotifycharts\") {\n                          playlists.push(item)\n                        } else if (item.name.match(/top\\ 50/gi)) {\n                          playlists.push(item)\n                        }\n                      })\n\n                      if (playlists.length > 1) {\n                        playlist = playlists[0]\n                      } else {\n                        playlist = playlists\n                      }\n\n                      if (Object.keys(playlist).length > 0) {\n\n                        setPlaylist(playlists)\n\n                        localStorage.setItem(\"countrys_top_fifths\", JSON.stringify(playlists))\n\n                        console.log(\"top_fifth_playlists: \", playlist)\n\n                        fetch(\"https://api.spotify.com/v1/me/player/devices\", {\n                          method: \"GET\",\n                          headers: {\n                            'Authorization': 'Bearer ' + accessToken\n                          }\n                        })\n                          .then(res => res.json())\n                          .then(result => {\n                            if (result.error && result.error.status === 401) {\n                              refreshToken()\n                            }\n                            console.log(\"all_devices_result: \", result)\n                            if (result.devices.length === 0) {\n                              deviceAlert.current.state.display = \"block\"\n                            }\n                            var deviceArr = []\n                            result.devices.map(device => {\n                              if (device.is_active === true) {\n                                deviceArr.push(device.id)\n                              }\n                              return deviceArr\n                            })\n                            console.log(\"active_devices_array: \", deviceArr)\n                            if (deviceArr.length > 0) {\n                              console.log(\"active device found!\")\n                              fetch(\"https://api.spotify.com/v1/me/player/play?\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': `Bearer ${accessToken}`,\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\",\n                                },\n                                body: JSON.stringify({ context_uri: playlist.uri })\n                              })\n                                .then((response) => response.json())\n                                .then(result => {\n                                  if (result.error && result.error.status === 401) {\n                                    refreshToken()\n                                  }\n                                  console.log(\"player_result: \", result)\n                                })\n                                .catch(err => console.log(\"player_err: \", err))\n                            } else if (deviceArr.length === 0) {\n                              console.log(\"there is no active device. first found device is activating...\")\n                              fetch(\"https://api.spotify.com/v1/me/player\", {\n                                method: \"PUT\",\n                                headers: {\n                                  'Authorization': 'Bearer ' + accessToken,\n                                  'Content-Type': 'application/json',\n                                  'Accept': 'application/json'\n                                },\n                                body: JSON.stringify({ device_ids: [deviceArr[0]], \"play\": true })\n                              })\n                                .then(res => res.json())\n                                .then(result => {\n                                  if (result.error && result.error.status === 401) {\n                                    refreshToken()\n                                  } \n                                  else if (result.error && result.error.status === 404) {\n                                    deviceAlert.current.state.display = \"block\"\n                                  }\n                                  console.log(\"activate_device_result: \", result)\n                                })\n                            }\n                          })\n                          .catch(err => console.log(\"device_err: \", err))\n                      } else if (Object.keys(playlist).length === 0) {\n                        console.log(\"there is no top 50 playlist for this country\")\n                        if (window.confirm(`There isn't any Top 50 playlist for ${feature.text}.\\nDo you wanna create one?`)) {\n                          let isPublic\n                          if (window.confirm(\"Do you wanna make it public?\")) {\n                            isPublic = true\n                          } else {\n                            isPublic = false\n                          }\n                          fetch(\"https://api.spotify.com/v1/me\", {\n                            method: \"GET\",\n                            headers: {\n                              \"Authorization\": \"Bearer \" + accessToken\n                            }\n                          })\n                            .then(res => res.json())\n                            .then(result => {\n                              console.log(\"current_user_info: \", result)\n                              fetch(`https://api.spotify.com/v1/users/${result.id}/playlists`, {\n                                method: \"POST\",\n                                headers: {\n                                  'Authorization': 'Bearer ' + accessToken,\n                                  'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify({ name: `${feature.text} Top 50`, public: isPublic, description: \"Created via Earthify\" })\n                              })\n                                .then(res => res.json())\n                                .then(result => {\n                                  console.log(\"create_playlist_result: \", result)\n                                  alert(`Congratulaitons! You've just created a playlist named ${feature.text} Top 50!\\nThe Spotify URI of your playtlist is ${result.uri}\\nLet's add some tracks.\\nMay the followers be with you! ;)`)\n                                })\n                            })\n                        }\n                      }\n                      return playlist\n                    })\n                    .catch(err => console.log(\"search_err: \", err))\n                }\n                return feature\n              })\n            })\n            .catch((err) => {\n              console.log(\"map_err: \", err)\n            })\n        }\n        function refreshToken() {\n          console.log(\"access token is refreshing...\")\n\n          fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: {\n              \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n              \"Accept\": \"application/json\"\n            },\n            body: `grant_type=refresh_token&refresh_token=${refresh}`\n          })\n            .then(res => res.json())\n            .then(result => {\n              console.log(\"updating access token...\")\n              localStorage.setItem('access_token', result.access_token)\n            })\n            .then(() => console.log(\"acess token were refresh\\nnew access token: \", localStorage.getItem('access_token')))\n            .then(() => window.location.reload())\n        }\n\n        requestToSpotify()\n      }\n    })\n\n\n  }, [])\n\n  var handleStyleMap = () => {\n    var currentMapStyle = earth.getStyle()\n    if (currentMapStyle.name === \"Mapbox Light\") {\n      earth.setStyle(\"mapbox://styles/mapbox/dark-v10\")\n      localStorage.setItem(\"map_style\", \"dark\")\n      setDark(localStorage.getItem(\"map_style\"))\n    } else if (currentMapStyle.name === \"Mapbox Dark\") {\n      earth.setStyle(\"mapbox://styles/mapbox/light-v10\")\n      localStorage.setItem(\"map_style\", \"light\")\n      setDark(localStorage.getItem(\"map_style\"))\n    }\n  }\n\n  var handleChangePlaylist = (playlist) => {\n\n    fetch(\"https://api.spotify.com/v1/me/player/play\", {\n      method: \"PUT\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        'Authorization': `Bearer ${localStorage.getItem('access_token')}`,\n      },\n      body: JSON.stringify({ context_uri: playlist.uri })\n    })\n      .then(res => res)\n      .then(result => {\n        console.log(\"pick_playlist_from_the_list: \", result)\n        if (result.status === 401) {\n          fetch(\"https://accounts.spotify.com/api/token\", {\n            method: \"POST\",\n            headers: {\n              \"Authorization\": \"Basic OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n              \"Accept\": \"application/json\"\n            },\n            body: `grant_type=refresh_token&refresh_token=${refresh}`\n          })\n            .then(res => res.json())\n            .then(result => {\n              console.log(\"updating access token...\")\n              localStorage.setItem('access_token', result.access_token)\n            })\n            .then(() => console.log(\"acess token were refresh\\nnew access token: \", localStorage.getItem('access_token')))\n            .then(() => window.location.reload())\n        }\n      })\n  }\n\n\n  var handleSearchText = (e) => {\n    e.preventDefault()\n    setSearch(e.target.value)\n  }\n\n  var handleSearchCountry = (e) => {\n    fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(e)}.json?&access_token=${mapboxgl.accessToken}`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => res.json())\n      .then(result => {\n        console.log(\"searched_country_result: \", result)\n        earth.setCenter(result.features[0].geometry.coordinates)\n        earth.setZoom(5)\n      })\n  }\n\n  var handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      handleSearchCountry(searchCountry)\n    }\n  }\n\n  var toggleSettings = (e) => {\n    setSettings(!openSettings)\n  }\n\n  return (\n    <>\n      <DeviceAlert ref={deviceAlert} />\n      <div className=\"settings\" style={{ textAlign: openSettings ? \"end\" : \"initial\" }}>\n        <div className=\"settings-content\" style={{ display: openSettings ? \"block\" : \"none\" }}>\n          <div className=\"modes\">\n            <div className=\"search-form\">\n              <input name=\"search-input\" type=\"text\" className=\"search-input\" value={searchCountry || \"\"} onKeyDown={handleKeyDown} onChange={handleSearchText}></input>\n              <div className=\"search-button\"><input type=\"image\" src={magnifier} alt=\"search\" className=\"icon\" onClick={() => handleSearchCountry(searchCountry)}></input></div>\n            </div>\n            <div>\n              <button className=\"map-style-button\" onClick={() => handleStyleMap()}>{dark === \"light\" ? \"Dark Mode\" : \"Light Mode\"}</button>\n            </div>\n          </div>\n          <div className=\"lists\">\n            <ul>\n              {playlistStore !== undefined ?\n                playlistStore.map(playlist => {\n                  return <li onClick={() => handleChangePlaylist(playlist)} key={playlist.id}>{playlist.name}</li>\n                }) : localStorage.getItem(\"countrys_top_fifths\") ? JSON.parse(localStorage.getItem(\"countrys_top_fifths\")).map(playlist => {\n                  return <li onClick={() => handleChangePlaylist(playlist)} key={playlist.id}>{playlist.name}</li>\n                }) : null\n              }\n            </ul>\n          </div>\n        </div>\n        <button className=\"toggle-settings\" onClick={toggleSettings}></button>\n      </div>\n      <div id=\"map\" className=\"App\">\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React, { useEffect } from 'react'\nimport earthmusic from './earthmusic.png'\n\nexport default function Intro() {\n\n    var client_id = \"9e71a4da3ee24d31ab4fd842607cce9e\";\n    var client_secret = \"907e432cd3d74554b29582eb58756277\";\n    var ciCsB64 = \"OWU3MWE0ZGEzZWUyNGQzMWFiNGZkODQyNjA3Y2NlOWU6OTA3ZTQzMmNkM2Q3NDU1NGIyOTU4MmViNTg3NTYyNzc=\"\n    // var redirect_uri = \"http://localhost:3000/callback\"\n    var redirect_uri = window.location.origin + window.location.pathname\n    var scopes = 'user-read-private user-read-email user-modify-playback-state user-read-playback-state playlist-modify-public playlist-modify-private';\n\n    var handleLogin = () => {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${encodeURIComponent(scopes)}&show_dialog=true`\n    }\n\n    if (window.location.search.match(/\\?code/g) !== null) {\n\n        fetch(\"https://accounts.spotify.com/api/token\", {\n          method: \"POST\",\n          headers: {\n            //\"Authorization\": \"Basic \" + ciCsB64,\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Accept\": \"application/json\"\n          },\n          body: `grant_type=authorization_code&code=${window.location.search.split(\"=\")[1]}&redirect_uri=${redirect_uri}&client_id=${client_id}&client_secret=${client_secret}`\n        })\n          .then(res => res.json())\n          .then(result => {\n            localStorage.setItem('create_access_token_result', JSON.stringify(result))\n            localStorage.setItem('access_token', result.access_token)\n            localStorage.setItem('refresh_token', result.refresh_token)\n          })\n          .then(() => window.location = window.location.origin + \"/earthify\")\n          .then(() => window.localStorage.setItem('auth', true))\n          .catch(err => console.log(\"acees_token_respone: \", err))\n      }\n\n    return(\n        <div className=\"intro\">\n            <div>\n            <img src={earthmusic} alt=\"earthify-icon\" className=\"intro-icon\"></img>\n            </div>\n            <div>\n            <button className=\"intro-button\" onClick={handleLogin}>Login</button>\n            </div>\n        </div>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Intro from './Intro'\n/* temporary import */\nimport DeviceAlert from './alerts/DeviceAlert'\n/* temporary import */\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <DeviceAlert /> */}\n    {localStorage.getItem(\"access_token\") == null ? <Intro /> : <App />}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}